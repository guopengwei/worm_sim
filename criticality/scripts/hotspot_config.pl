#!/usr/bin/perl -w
# Author: uogras@ece.cmu.edu
# File name: hotspot_config.pl
# Date Implemented:  <Sep. 29 2004>
# Last Modified: <>
# Description: 
#
# /hotspot_config.pl m n ID1 ID2 ID3 Rate1 Rate2 Rate3 Rate4 rate_control
#
# m,n: Size of the grid (m by n)
#
# ID1, ID2, ID3 : ID of the hotspot nodes 0 <= ID < m*n
#
# Rate1, Rate2, Rate3 Rate4: Rates at which the corresponding nodes receive more traffic,
# Rate 4 is the rate for remaining nodes

# rate_control: This coefficient is multiplied by the rates at which the nodes generate
# traffic. To decrease the rates select rate_control<1, or to increase the rates, select
# it more than 1.
########################################################################

use strict ;

# the first three args are the IDs of hot-spot nodes
# the following three args are the rates for each node

my $m = $ARGV[0];
my $n = $ARGV[1];

my $ID1 = $ARGV[2];
my $ID2 = $ARGV[3];
my $ID3 = $ARGV[4];

my $R1 = $ARGV[5];
my $R2 = $ARGV[6];
my $R3 = $ARGV[7];  
my $R4 = $ARGV[8];

my $rate_control = $ARGV[9];

#open(out_file, "hotspot.config");

# put header comment in config file
print ("# File automatically generated by  utility hotspot_config.pl\n");
 
for (my $i=0; $i < $m * $n; $i++){ 
  for (my $j=0; $j < $m * $n; $j++){
    if ( $i != $j) {
     	print ("\@NODE\t", $i, "\n");
        if ($j == $ID1) {
	#    print ("packet_to_destination_rate \n");}
	    print ("packet_to_destination_rate\t", $j, "\t", $rate_control*$R1/($m*$n-1),"\n");
	}
	elsif ($j == $ID2) {
	#    print ("packet_to_destination_rate \n");}
	    print ("packet_to_destination_rate\t", $j, "\t",$rate_control*$R2/($m*$n-1),"\n");
	}
	elsif ($j == $ID3) {
	#    print ("packet_to_destination_rate \n");}
	    print ("packet_to_destination_rate\t", $j, "\t",$rate_control*$R3/($m*$n-1),"\n");
	}
	else {
	 #   print ("packet_to_destination_rate \n");
	   print ("packet_to_destination_rate\t", $j, "\t", ,$rate_control*$R4/($m*$n-1),"\n");
	}
    }     #if ($i ~= $j)
 } #for j
} # for i

#print ("Succeed.\n");

#close(out_file);
